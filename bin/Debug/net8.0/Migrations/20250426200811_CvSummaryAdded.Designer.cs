// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CvApi2.Migrations
{
    [DbContext(typeof(CvDbContext))]
    [Migration("20250426200811_CvSummaryAdded")]
    partial class CvSummaryAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("CvAPI2.Models.Award", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AwardDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("CvAPI2.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CertificationDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("CvAPI2.Models.CompetenceOverview", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("skill_level")
                        .HasColumnType("longtext");

                    b.Property<string>("skill_name")
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.HasIndex("CvId");

                    b.ToTable("CompetenceOverviews");
                });

            modelBuilder.Entity("CvAPI2.Models.Cv", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Personalia")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cvs");
                });

            modelBuilder.Entity("CvAPI2.Models.CvSummary", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CvId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SummaryText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("CvSummaries");
                });

            modelBuilder.Entity("CvAPI2.Models.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Degree")
                        .HasColumnType("longtext");

                    b.Property<string>("EducationDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("School")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("CvAPI2.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Proficiency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CvAPI2.Models.ProjectExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("longtext");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProjectExperienceDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectName")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("ProjectExperiences");
                });

            modelBuilder.Entity("CvAPI2.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("CvAPI2.Models.RoleOverview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Role")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("RoleOverviews");
                });

            modelBuilder.Entity("CvAPI2.Models.Tag.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CvAPI2.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CvAPI2.Models.WorkExperience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CvId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WorkExperienceDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CvId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectExperienceTag", b =>
                {
                    b.Property<int>("ProjectExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProjectExperienceId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectExperienceTags");
                });

            modelBuilder.Entity("WorkExperienceTag", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("WorkExperienceId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("WorkExperienceTags");
                });

            modelBuilder.Entity("Course", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("Courses")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.Award", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("Awards")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.Certification", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("Certifications")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.CompetenceOverview", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("CompetenceOverviews")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.Cv", b =>
                {
                    b.HasOne("CvAPI2.Models.User", "User")
                        .WithOne("Cv")
                        .HasForeignKey("CvAPI2.Models.Cv", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CvAPI2.Models.CvSummary", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("CvSummaries")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.Education", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("Educations")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.Language", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("Languages")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.ProjectExperience", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("ProjectExperiences")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.RoleOverview", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("RoleOverviews")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("CvAPI2.Models.User", b =>
                {
                    b.HasOne("CvAPI2.Models.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("CvAPI2.Models.WorkExperience", b =>
                {
                    b.HasOne("CvAPI2.Models.Cv", "Cv")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CvAPI2.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CvAPI2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CvAPI2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CvAPI2.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvAPI2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CvAPI2.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectExperienceTag", b =>
                {
                    b.HasOne("CvAPI2.Models.ProjectExperience", "ProjectExperience")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvAPI2.Models.Tag.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectExperience");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WorkExperienceTag", b =>
                {
                    b.HasOne("CvAPI2.Models.Tag.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CvAPI2.Models.WorkExperience", "WorkExperience")
                        .WithMany("Tags")
                        .HasForeignKey("WorkExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("WorkExperience");
                });

            modelBuilder.Entity("CvAPI2.Models.Cv", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Certifications");

                    b.Navigation("CompetenceOverviews");

                    b.Navigation("Courses");

                    b.Navigation("CvSummaries");

                    b.Navigation("Educations");

                    b.Navigation("Languages");

                    b.Navigation("ProjectExperiences");

                    b.Navigation("RoleOverviews");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("CvAPI2.Models.ProjectExperience", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("CvAPI2.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CvAPI2.Models.User", b =>
                {
                    b.Navigation("Cv")
                        .IsRequired();
                });

            modelBuilder.Entity("CvAPI2.Models.WorkExperience", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
